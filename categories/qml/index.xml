<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>QML on 嵌入式系统 Enthusiast</title>
    <link>http://localhost:1313/categories/qml/</link>
    <description>Recent content in QML on 嵌入式系统 Enthusiast</description>
    <generator>Hugo</generator>
    <language>zh-cn</language>
    <lastBuildDate>Fri, 02 Aug 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/categories/qml/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>QML Options</title>
      <link>http://localhost:1313/blog/2024/08/02/qml-options/</link>
      <pubDate>Fri, 02 Aug 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/blog/2024/08/02/qml-options/</guid>
      <description>理解你的需求，以下是 QML 中顶层容器的不同类型，以及它们适用于哪些场景：&#xA;顶层容器类型 ApplicationWindow&#xA;用途：适用于创建应用程序的主窗口，带有内置的菜单栏和状态栏。 导入模块：QtQuick.Controls Window&#xA;用途：用于创建没有内置菜单栏和状态栏的窗口。可以手动添加所需的控件。 导入模块：QtQuick.Window Dialog&#xA;用途：用于创建对话框窗口，通常用于提示用户进行某些操作或输入信息。 导入模块：QtQuick.Controls Popup&#xA;用途：用于创建弹出窗口，可以用于上下文菜单、工具提示等。 导入模块：QtQuick.Controls Item&#xA;用途：最基本的可视化对象容器，不创建窗口，但可以作为其他元素的父容器。 导入模块：QtQuick Rectangle&#xA;用途：用于创建简单的矩形区域，常用于布局和装饰。 导入模块：QtQuick Application&#xA;用途：通常作为 QML 应用程序的根对象，管理整个应用程序的生命周期。 导入模块：QtQuick 示例代码以下是每个顶层容器的简单示例：&#xA;1. ApplicationWindowimport QtQuick 6.2 import QtQuick.Controls 6.2 ApplicationWindow { visible: true width: 800 height: 600 title: &amp;#34;ApplicationWindow Example&amp;#34; } 2. Windowimport QtQuick 6.2 import QtQuick.Window 6.2 Window { visible: true width: 800 height: 600 title: &amp;#34;Window Example&amp;#34; } 3. Dialogimport QtQuick 6.2 import QtQuick.</description>
    </item>
  </channel>
</rss>
