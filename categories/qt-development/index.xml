<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Qt Development on 嵌入式系统 Enthusiast</title>
    <link>http://localhost:1313/categories/qt-development/</link>
    <description>Recent content in Qt Development on 嵌入式系统 Enthusiast</description>
    <generator>Hugo</generator>
    <language>zh-cn</language>
    <lastBuildDate>Mon, 19 Aug 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/categories/qt-development/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Q_PROPERTY</title>
      <link>http://localhost:1313/blog/2024/08/19/q_property/</link>
      <pubDate>Mon, 19 Aug 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/blog/2024/08/19/q_property/</guid>
      <description>Q_PROPERTY 的详细解释Q_PROPERTY 是 Qt 的元对象系统的一部分，它用于在 Qt 的元对象系统中注册属性，使得这些属性可以被 QML 和其他 Qt 的特性（如信号与槽机制）访问。它的作用包括：&#xA;属性的声明和管理：通过 Q_PROPERTY 声明的属性可以在 Qt 的元对象系统中被识别和管理，使得它们可以在 QML 中访问和绑定。 提供 getter 和 setter：Q_PROPERTY 允许你指定一个属性的 getter 和 setter 方法，这些方法用于访问和修改属性值。 通知属性变化：Q_PROPERTY 允许你定义一个变化通知信号，这样当属性的值发生变化时，可以发出信号通知 QML 或其他对象。 支持绑定：在 QML 中，你可以绑定 UI 元素的属性到 C++ 类的属性，Q_PROPERTY 支持这种绑定机制，使得 UI 可以自动更新。 Q_PROPERTY 的基本语法如下：Q_PROPERTY(type name READ getter WRITE setter NOTIFY signal) type：属性的数据类型。 name：属性的名称。 READ getter：指定一个 getter 方法来获取属性值。 WRITE setter：指定一个 setter 方法来设置属性值。 可以加const； 必须是在public 作用限定符修饰下； 不能是指针或引用，必须是可以复制的值； NOTIFY signal：指定一个信号，当属性值发生变化时发出此信号。 </description>
    </item>
    <item>
      <title>QML的Menu容器</title>
      <link>http://localhost:1313/blog/2024/08/19/qml%E7%9A%84menu%E5%AE%B9%E5%99%A8/</link>
      <pubDate>Mon, 19 Aug 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/blog/2024/08/19/qml%E7%9A%84menu%E5%AE%B9%E5%99%A8/</guid>
      <description>QML 中的 Menu 结构在 QML 中，Menu 是一个复杂的控件，它通常用于创建上下文菜单或主菜单。在 QML 中，像 Menu 这样的控件可以通过 background 和 contentItem 等属性来自定义其外观和行为。这些属性通常用于更改控件的默认布局和样式。&#xA;1. background 属性 background 属性是一个 Item 或任何其他可以作为背景的元素。它定义了 Menu 背景的样式。通常，你会使用 Rectangle 或其他图形元素来定义背景的颜色、边框、圆角等。 位置: background 位于 Menu 的最底层，用于显示菜单的背景。它通常覆盖整个 Menu 的区域。 2. contentItem 属性 contentItem 是一个 Item，定义了 Menu 的主要内容。通过自定义 contentItem，你可以完全控制 Menu 中菜单项的布局方式和样式。 位置: contentItem 位于 background 之上，包含 MenuItem 和其他控件的布局。 Menu 的基本结构可以将 Menu 看作一个容器，包含以下几个关键区域：&#xA;background:&#xA;功能: 负责绘制菜单的背景颜色、边框、阴影等样式。 自定义: 可以使用任何 Item 来自定义背景（通常是 Rectangle）。 默认行为: 如果不指定 background，菜单将使用系统默认的背景样式。 contentItem:&#xA;功能: 负责容纳并布局菜单项（MenuItem），可以是 Column、Row、Grid 等布局容器。 自定义: 可以使用 Column、Row、Grid 等来控制 MenuItem 的排列方式。 默认行为: 如果不指定 contentItem，Menu 将使用系统默认的布局来排列 MenuItem。 MenuItem:</description>
    </item>
    <item>
      <title>QML Options</title>
      <link>http://localhost:1313/blog/2024/08/02/qml-options/</link>
      <pubDate>Fri, 02 Aug 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/blog/2024/08/02/qml-options/</guid>
      <description>理解你的需求，以下是 QML 中顶层容器的不同类型，以及它们适用于哪些场景：&#xA;顶层容器类型ApplicationWindow&#xD;用途：适用于创建应用程序的主窗口，带有内置的菜单栏和状态栏。&#xD;导入模块：QtQuick.Controls&#xD;Window&#xD;用途：用于创建没有内置菜单栏和状态栏的窗口。可以手动添加所需的控件。&#xD;导入模块：QtQuick.Window&#xD;Dialog&#xD;用途：用于创建对话框窗口，通常用于提示用户进行某些操作或输入信息。&#xD;导入模块：QtQuick.Controls&#xD;Popup&#xD;用途：用于创建弹出窗口，可以用于上下文菜单、工具提示等。&#xD;导入模块：QtQuick.Controls&#xD;Item&#xD;用途：最基本的可视化对象容器，不创建窗口，但可以作为其他元素的父容器。&#xD;导入模块：QtQuick&#xD;Rectangle&#xD;用途：用于创建简单的矩形区域，常用于布局和装饰。&#xD;导入模块：QtQuick&#xD;Application&#xD;用途：通常作为 QML 应用程序的根对象，管理整个应用程序的生命周期。&#xD;导入模块：QtQuick 示例代码&#xA;以下是每个顶层容器的简单示例：&#xA;1. ApplicationWindowimport QtQuick 6.2 import QtQuick.Controls 6.2 ApplicationWindow { visible: true width: 800 height: 600 title: &amp;#34;ApplicationWindow Example&amp;#34; } 2. Windowimport QtQuick 6.2 import QtQuick.Window 6.2 Window { visible: true width: 800 height: 600 title: &amp;#34;Window Example&amp;#34; } 3. Dialogimport QtQuick 6.2 import QtQuick.</description>
    </item>
    <item>
      <title>QML工程里的content文件夹</title>
      <link>http://localhost:1313/blog/2024/08/02/qml%E5%B7%A5%E7%A8%8B%E9%87%8C%E7%9A%84content%E6%96%87%E4%BB%B6%E5%A4%B9/</link>
      <pubDate>Fri, 02 Aug 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/blog/2024/08/02/qml%E5%B7%A5%E7%A8%8B%E9%87%8C%E7%9A%84content%E6%96%87%E4%BB%B6%E5%A4%B9/</guid>
      <description>Introductioncontent文件夹里面管理着qml的模块，这样的模块可以有多个。 我这里的content文件夹，名字本身可以是其他的名字。有没有什么字符限制，这个暂时还不知道。&#xA;入口在根目录下的main.qml&#xA;/* This file is generated and only relevant for integrating the project into a Qt 6 and cmake based C++ project. */&#xA;import QtQuick import content&#xA;App {&#xA;}&#xA;content 结构根目录下有一个CMakeList.txt&#xA;### This file is automatically generated by Qt Design Studio. ### Do not change qt_add_library(content STATIC) qt6_add_qml_module(content URI &amp;#34;content&amp;#34; VERSION 1.0 RESOURCE_PREFIX &amp;#34;/qt/qml&amp;#34; QML_FILES App.qml Screen01.ui.qml RESOURCES fonts/fonts.txt QML_FILES volume_mixer/a.qml QML_FILES volume_mixer/b.qml QML_FILES volume_mixer/c.qml QML_FILES volume_mixer/d.qml ) References1.</description>
    </item>
    <item>
      <title>CMake Key Points in Qt6</title>
      <link>http://localhost:1313/blog/2024/07/18/cmake-key-points-in-qt6/</link>
      <pubDate>Thu, 18 Jul 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/blog/2024/07/18/cmake-key-points-in-qt6/</guid>
      <description>&#xD;001. find_package(QT NAMES Qt6 Qt5 REQUIRED COMPONENTS Core Widgets)&#xD;find_package(Qt${QT_VERSION_MAJOR} REQUIRED COMPONENTS Core Widgets) Usages&#xD;find_package(QT NAMES Qt6 Qt5 REQUIRED COMPONENTS Core)：&#xA;这行代码试图找到名为 Qt6 或 Qt5 的 Qt 版本，并且要求找到其中的 Core 组件。 如果系统上安装了 Qt6，这行代码会找到 Qt6；如果没有找到 Qt6，会尝试找到 Qt5。&#xA;find_package(Qt${QT_VERSION_MAJOR} REQUIRED COMPONENTS Core)：&#xA;这行代码利用第一个 find_package 结果中设置的 QT_VERSION_MAJOR 变量来找到具体的 Qt 版本及其 Core 组件。&#xA;cmake_minimum_required(VERSION 3.14)project(LibDiyToolsWrapper LANGUAGES CXX)set(CMAKE_AUTOUIC ON)set(CMAKE_CXX_STANDARD 17)set(CMAKE_CXX_STANDARD_REQUIRED ON)add_library( LibDiyToolsWrapper SHARED LibDiyToolsWrapper_global.h )include_directories( .. ../inc )target_link_libraries( LibDiyToolsWrapper PRIVATE Qt${QT_VERSION_MAJOR}::Widgets )target_compile_definitions(LibDiyToolsWrapper PRIVATE LIBDIYTOOLSWRAPPER_LIBRARY)set( DESTINATION_DIR $&amp;lt;IF:$&amp;lt;CONFIG:Debug&amp;gt;,${CMAKE_BINARY_DIR}/finalDLLs/Debug,) 嵌套&#xD;set( DESTINATION_DIR $&amp;lt;IF:$&amp;lt;CONFIG:Debug&amp;gt;,${CMAKE_BINARY_DIR}/finalDLLs/Debug, DESTINATION_DIR $&amp;lt;IF:$&amp;lt;CONFIG:Debug&amp;gt;,${CMAKE_BINARY_DIR}/finalDLLs/Release, DESTINATION_DIR $&amp;lt;IF:$&amp;lt;CONFIG:Debug&amp;gt;,${CMAKE_BINARY_DIR}/finalDLLs/Profile, ${CMAKE_BINARY_DIR}/Unknown&amp;gt;&amp;gt;&amp;gt; ) $&amp;lt;IF: # 第一层开始 $&amp;lt;CONFIG:Debug&amp;gt;,${CMAKE_BINARY_DIR}/Debug, # 第一层条件和结果 $&amp;lt;IF: # 第二层开始 $&amp;lt;CONFIG:Release&amp;gt;,${CMAKE_BINARY_DIR}/Release, # 第二层条件和结果 $&amp;lt;IF: # 第三层开始 $&amp;lt;CONFIG:Profile&amp;gt;,${CMAKE_BINARY_DIR}/Profile, # 第三层条件和结果 ${CMAKE_BINARY_DIR}/Unknown # 默认值 &amp;gt; # 第三层结束 &amp;gt; # 第二层结束 &amp;gt; # 第一层结束 </description>
    </item>
  </channel>
</rss>
