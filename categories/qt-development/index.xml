<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Qt Development on 嵌入式系统 Enthusiast</title>
    <link>http://localhost:1313/categories/qt-development/</link>
    <description>Recent content in Qt Development on 嵌入式系统 Enthusiast</description>
    <generator>Hugo</generator>
    <language>zh-cn</language>
    <lastBuildDate>Mon, 22 Jul 2024 22:33:38 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/categories/qt-development/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>CMake Key Points in Qt6</title>
      <link>http://localhost:1313/blog/2024/07/18/cmake-key-points-in-qt6/</link>
      <pubDate>Thu, 18 Jul 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/blog/2024/07/18/cmake-key-points-in-qt6/</guid>
      <description>&#xD;001. find_package(QT NAMES Qt6 Qt5 REQUIRED COMPONENTS Core Widgets)&#xD;find_package(Qt${QT_VERSION_MAJOR} REQUIRED COMPONENTS Core Widgets) Usages&#xD;find_package(QT NAMES Qt6 Qt5 REQUIRED COMPONENTS Core)：&#xA;这行代码试图找到名为 Qt6 或 Qt5 的 Qt 版本，并且要求找到其中的 Core 组件。 如果系统上安装了 Qt6，这行代码会找到 Qt6；如果没有找到 Qt6，会尝试找到 Qt5。&#xA;find_package(Qt${QT_VERSION_MAJOR} REQUIRED COMPONENTS Core)：&#xA;这行代码利用第一个 find_package 结果中设置的 QT_VERSION_MAJOR 变量来找到具体的 Qt 版本及其 Core 组件。&#xA;cmake_minimum_required(VERSION 3.14)project(LibDiyToolsWrapper LANGUAGES CXX)set(CMAKE_AUTOUIC ON)set(CMAKE_CXX_STANDARD 17)set(CMAKE_CXX_STANDARD_REQUIRED ON)add_library( LibDiyToolsWrapper SHARED LibDiyToolsWrapper_global.h )include_directories( .. ../inc )target_link_libraries( LibDiyToolsWrapper PRIVATE Qt${QT_VERSION_MAJOR}::Widgets )target_compile_definitions(LibDiyToolsWrapper PRIVATE LIBDIYTOOLSWRAPPER_LIBRARY)set( DESTINATION_DIR $&amp;lt;IF:$&amp;lt;CONFIG:Debug&amp;gt;,${CMAKE_BINARY_DIR}/finalDLLs/Debug,) 嵌套&#xD;set( DESTINATION_DIR $&amp;lt;IF:$&amp;lt;CONFIG:Debug&amp;gt;,${CMAKE_BINARY_DIR}/finalDLLs/Debug, DESTINATION_DIR $&amp;lt;IF:$&amp;lt;CONFIG:Debug&amp;gt;,${CMAKE_BINARY_DIR}/finalDLLs/Release, DESTINATION_DIR $&amp;lt;IF:$&amp;lt;CONFIG:Debug&amp;gt;,${CMAKE_BINARY_DIR}/finalDLLs/Profile, ${CMAKE_BINARY_DIR}/Unknown&amp;gt;&amp;gt;&amp;gt; ) $&amp;lt;IF: # 第一层开始 $&amp;lt;CONFIG:Debug&amp;gt;,${CMAKE_BINARY_DIR}/Debug, # 第一层条件和结果 $&amp;lt;IF: # 第二层开始 $&amp;lt;CONFIG:Release&amp;gt;,${CMAKE_BINARY_DIR}/Release, # 第二层条件和结果 $&amp;lt;IF: # 第三层开始 $&amp;lt;CONFIG:Profile&amp;gt;,${CMAKE_BINARY_DIR}/Profile, # 第三层条件和结果 ${CMAKE_BINARY_DIR}/Unknown # 默认值 &amp;gt; # 第三层结束 &amp;gt; # 第二层结束 &amp;gt; # 第一层结束 </description>
    </item>
  </channel>
</rss>
