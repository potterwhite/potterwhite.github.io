<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Qt on 嵌入式系统 Enthusiast</title>
    <link>http://localhost:1313/categories/qt/</link>
    <description>Recent content in Qt on 嵌入式系统 Enthusiast</description>
    <generator>Hugo</generator>
    <language>zh-cn</language>
    <lastBuildDate>Thu, 15 Aug 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/categories/qt/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Qt Deployment</title>
      <link>http://localhost:1313/blog/2024/08/15/qt-deployment/</link>
      <pubDate>Thu, 15 Aug 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/blog/2024/08/15/qt-deployment/</guid>
      <description>要完成Qt项目的部署，你可以按照以下步骤使用windeployqt工具：&#xA;1. 准备可执行文件确保你已经生成了应用程序的可执行文件（如.exe文件），通常在release目录下。&#xA;2. 运行windeployqt打开命令行，导航到包含可执行文件的目录，然后运行以下命令：&#xA;windeployqt your_application.exe 此命令会自动扫描你的应用程序，并将所有必要的Qt库和插件复制到可执行文件所在的目录中。&#xA;3. 检查依赖项运行windeployqt后，检查输出目录中是否包含了所有必需的文件，包括Qt的DLL文件、插件、以及可能的配置文件。 windeployqt会去把相关的依赖项都copy到exe当前的目录下 但问题是，似乎有时候并不整全，我们需要在一个没安装qt sdk的机器上去运行这个deploy过的程序，它会一步一步的提醒缺少了xxx.dll。 我们只要拷贝缺少的dll到项目文件夹下，即可。&#xA;4. 测试部署包在另一台没有安装Qt的Windows机器上测试你的应用程序，确保它能够正常运行。这是验证所有依赖项是否正确打包的关键步骤。&#xA;5. 打包和分发将输出目录打包成安装程序（如使用Inno Setup）或压缩文件，然后分发给用户。&#xA;可能的扩展如果你的应用程序有额外的依赖项，比如特定的字体、资源文件或动态链接库（DLL），需要手动添加到部署包中。&#xA;这样，你就可以完成Qt应用程序的基本部署。如果过程中遇到问题或需要更多细节，可以参考官方文档或向我求助。</description>
    </item>
    <item>
      <title>qml notes</title>
      <link>http://localhost:1313/blog/2024/08/10/qml-notes/</link>
      <pubDate>Sat, 10 Aug 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/blog/2024/08/10/qml-notes/</guid>
      <description>001. **[Expose Properties]property alias **property alias ${EXTERNAL_SHARED_ID}: ${INNER_ID} if we have this statement in sub-qml files, the qml file who invoke current sub-qml file could access these or this component whose id is ${EXTERNAL_SHARED_ID}&#xA;002. QML的模块化case：我要如何在子文件a.qml里面去访问子文件b.qml里面的某一个属性，例如height？&#xA;solutionA:&#xA;透过父文件进行指定，父文件在创建a和b两个对象的实例的时候，就可以指定他们的height； 至于如果要指定的还不是height这种属性，而是比较难访问的属性，怎么办呢？就得看看其他办法。&#xA;solutionB: 用信号槽的方式 这种方式是qt的原生自带的技术&#xA;solutionC: 用property 在 QML 中，你可以在子文件（例如 Background.qml 和 Buttons.qml）中定义 property，用来暴露组件的某些属性，如 height，以便在父组件中访问这些属性。&#xA;003. Debug: qt.gui.imageio: libpng warning: iCCP: known incorrect sRGB profilePost about the reason of this warning&#xA;It&amp;#39;s because libpng 1.</description>
    </item>
  </channel>
</rss>
