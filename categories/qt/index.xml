<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Qt on 嵌入式系统爱好者</title>
    <link>http://localhost:1313/categories/qt/</link>
    <description>Recent content in Qt on 嵌入式系统爱好者</description>
    <generator>Hugo</generator>
    <language>zh-cn</language>
    <lastBuildDate>Thu, 15 Aug 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/categories/qt/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Qt Deployment</title>
      <link>http://localhost:1313/blog/2024/08/15/qt-deployment/</link>
      <pubDate>Thu, 15 Aug 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/blog/2024/08/15/qt-deployment/</guid>
      <description>&lt;p&gt;要完成Qt项目的部署，你可以按照以下步骤使用&lt;code&gt;windeployqt&lt;/code&gt;工具：&lt;/p&gt;&#xA;&lt;h3 id=&#34;1-准备可执行文件&#34;&gt;1. 准备可执行文件&lt;/h3&gt;&#xA;&lt;p&gt;确保你已经生成了应用程序的可执行文件（如&lt;code&gt;.exe&lt;/code&gt;文件），通常在&lt;code&gt;release&lt;/code&gt;目录下。&lt;/p&gt;&#xA;&lt;h3 id=&#34;2-运行windeployqt&#34;&gt;2. 运行&lt;code&gt;windeployqt&lt;/code&gt;&lt;/h3&gt;&#xA;&lt;p&gt;打开命令行，导航到包含可执行文件的目录，然后运行以下命令：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;windeployqt your_application.exe&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;此命令会自动扫描你的应用程序，并将所有必要的Qt库和插件复制到可执行文件所在的目录中。&lt;/p&gt;&#xA;&lt;h3 id=&#34;3-检查依赖项&#34;&gt;3. 检查依赖项&lt;/h3&gt;&#xA;&lt;p&gt;运行&lt;code&gt;windeployqt&lt;/code&gt;后，检查输出目录中是否包含了所有必需的文件，包括Qt的DLL文件、插件、以及可能的配置文件。&#xA;windeployqt会去把相关的依赖项都copy到exe当前的目录下&#xA;但问题是，似乎有时候并不整全，我们需要在一个没安装qt sdk的机器上去运行这个deploy过的程序，它会一步一步的提醒缺少了xxx.dll。&#xA;我们只要拷贝缺少的dll到项目文件夹下，即可。&lt;/p&gt;&#xA;&lt;h3 id=&#34;4-测试部署包&#34;&gt;4. 测试部署包&lt;/h3&gt;&#xA;&lt;p&gt;在另一台没有安装Qt的Windows机器上测试你的应用程序，确保它能够正常运行。这是验证所有依赖项是否正确打包的关键步骤。&lt;/p&gt;&#xA;&lt;h3 id=&#34;5-打包和分发&#34;&gt;5. 打包和分发&lt;/h3&gt;&#xA;&lt;p&gt;将输出目录打包成安装程序（如使用Inno Setup）或压缩文件，然后分发给用户。&lt;/p&gt;&#xA;&lt;h3 id=&#34;可能的扩展&#34;&gt;可能的扩展&lt;/h3&gt;&#xA;&lt;p&gt;如果你的应用程序有额外的依赖项，比如特定的字体、资源文件或动态链接库（DLL），需要手动添加到部署包中。&lt;/p&gt;&#xA;&lt;p&gt;这样，你就可以完成Qt应用程序的基本部署。如果过程中遇到问题或需要更多细节，可以参考&lt;a href=&#34;https://doc.qt.io/Qt-5/windows-deployment.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;官方文档&lt;/a&gt;或向我求助。&lt;/p&gt;</description>
    </item>
    <item>
      <title>qml notes</title>
      <link>http://localhost:1313/blog/2024/08/10/qml-notes/</link>
      <pubDate>Sat, 10 Aug 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/blog/2024/08/10/qml-notes/</guid>
      <description>&lt;h2 id=&#34;001-expose-propertiesproperty-alias-&#34;&gt;001. **[Expose Properties]property alias **&lt;/h2&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;property&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;alias&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;EXTERNAL_SHARED_ID&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;INNER_ID&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;if we have this statement in sub-qml files, the qml file who invoke current sub-qml file could access these or this component whose id is ${EXTERNAL_SHARED_ID}&lt;/p&gt;&#xA;&lt;h2 id=&#34;002-qml的模块化&#34;&gt;002. &lt;strong&gt;QML的模块化&lt;/strong&gt;&lt;/h2&gt;&#xA;&lt;p&gt;case：&lt;strong&gt;我要如何在子文件a.qml里面去访问子文件b.qml里面的某一个属性，例如height？&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;solutionA&lt;/code&gt;:&lt;/p&gt;&#xA;&lt;p&gt;透过父文件进行指定，父文件在创建a和b两个对象的实例的时候，就可以指定他们的height；&#xA;至于如果要指定的还不是height这种属性，而是比较难访问的属性，怎么办呢？就得看看其他办法。&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;solutionB&lt;/code&gt;:&#xA;用信号槽的方式&#xA;这种方式是qt的原生自带的技术&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;solutionC&lt;/code&gt;:&#xA;用property&#xA;在 QML 中，你可以在子文件（例如 Background.qml 和 Buttons.qml）中定义 property，用来暴露组件的某些属性，如 height，以便在父组件中访问这些属性。&lt;/p&gt;&#xA;&lt;h2 id=&#34;003-debug-qtguiimageio-libpng-warning-iccp-known-incorrect-srgb-profile&#34;&gt;003. Debug: qt.gui.imageio: libpng warning: iCCP: known incorrect sRGB profile&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://bbs.archlinux.org/viewtopic.php?pid=1269845#p1269845&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Post about the reason of this warning&lt;/a&gt;&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;It&amp;#39;s because libpng 1.6 does more checking of the pngs, and one or more of the png files used has an old sRGB profile. &#xA;It&amp;#39;s supposed to just be a warning, are you sure this is what&amp;#39;s causing the build failure? &#xA;&#xA;If so, you may need to replace the sRGB profile yourself or get upstream to do it.&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;004-取整怎么做&#34;&gt;004. 取整怎么做？&lt;/h2&gt;&#xA;&lt;p&gt;在 QML 中，你可以使用 Math.floor()、Math.ceil() 或 Math.round() 函数来对带小数的数值进行取整操作：&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
