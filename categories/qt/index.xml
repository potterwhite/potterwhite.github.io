<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Qt on 嵌入式系统爱好者</title><link>https://potterwhite.github.io/categories/qt/</link><description>Recent content in Qt on 嵌入式系统爱好者</description><generator>Hugo</generator><language>zh-cn</language><lastBuildDate>Thu, 15 Aug 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://potterwhite.github.io/categories/qt/index.xml" rel="self" type="application/rss+xml"/><item><title>Qt Deployment</title><link>https://potterwhite.github.io/blog/2024/08/15/qt-deployment/</link><pubDate>Thu, 15 Aug 2024 00:00:00 +0000</pubDate><guid>https://potterwhite.github.io/blog/2024/08/15/qt-deployment/</guid><description>&lt;p>要完成Qt项目的部署，你可以按照以下步骤使用&lt;code>windeployqt&lt;/code>工具：&lt;/p>
&lt;h3 id="1-准备可执行文件">1. 准备可执行文件&lt;/h3>
&lt;p>确保你已经生成了应用程序的可执行文件（如&lt;code>.exe&lt;/code>文件），通常在&lt;code>release&lt;/code>目录下。&lt;/p>
&lt;h3 id="2-运行windeployqt">2. 运行&lt;code>windeployqt&lt;/code>&lt;/h3>
&lt;p>打开命令行，导航到包含可执行文件的目录，然后运行以下命令：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>windeployqt your_application.exe
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>此命令会自动扫描你的应用程序，并将所有必要的Qt库和插件复制到可执行文件所在的目录中。&lt;/p>
&lt;h3 id="3-检查依赖项">3. 检查依赖项&lt;/h3>
&lt;p>运行&lt;code>windeployqt&lt;/code>后，检查输出目录中是否包含了所有必需的文件，包括Qt的DLL文件、插件、以及可能的配置文件。
windeployqt会去把相关的依赖项都copy到exe当前的目录下
但问题是，似乎有时候并不整全，我们需要在一个没安装qt sdk的机器上去运行这个deploy过的程序，它会一步一步的提醒缺少了xxx.dll。
我们只要拷贝缺少的dll到项目文件夹下，即可。&lt;/p>
&lt;h3 id="4-测试部署包">4. 测试部署包&lt;/h3>
&lt;p>在另一台没有安装Qt的Windows机器上测试你的应用程序，确保它能够正常运行。这是验证所有依赖项是否正确打包的关键步骤。&lt;/p>
&lt;h3 id="5-打包和分发">5. 打包和分发&lt;/h3>
&lt;p>将输出目录打包成安装程序（如使用Inno Setup）或压缩文件，然后分发给用户。&lt;/p>
&lt;h3 id="可能的扩展">可能的扩展&lt;/h3>
&lt;p>如果你的应用程序有额外的依赖项，比如特定的字体、资源文件或动态链接库（DLL），需要手动添加到部署包中。&lt;/p>
&lt;p>这样，你就可以完成Qt应用程序的基本部署。如果过程中遇到问题或需要更多细节，可以参考&lt;a href="https://doc.qt.io/Qt-5/windows-deployment.html" target="_blank" rel="noopener">官方文档&lt;/a>或向我求助。&lt;/p></description></item><item><title>qml notes</title><link>https://potterwhite.github.io/blog/2024/08/10/qml-notes/</link><pubDate>Sat, 10 Aug 2024 00:00:00 +0000</pubDate><guid>https://potterwhite.github.io/blog/2024/08/10/qml-notes/</guid><description>&lt;h2 id="001-expose-propertiesproperty-alias-">001. **[Expose Properties]property alias **&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">property&lt;/span> &lt;span style="color:#000">alias&lt;/span> &lt;span style="color:#000">$&lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#000">EXTERNAL_SHARED_ID&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#000">$&lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#000">INNER_ID&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>if we have this statement in sub-qml files, the qml file who invoke current sub-qml file could access these or this component whose id is ${EXTERNAL_SHARED_ID}&lt;/p>
&lt;h2 id="002-qml的模块化">002. &lt;strong>QML的模块化&lt;/strong>&lt;/h2>
&lt;p>case：&lt;strong>我要如何在子文件a.qml里面去访问子文件b.qml里面的某一个属性，例如height？&lt;/strong>&lt;/p>
&lt;p>&lt;code>solutionA&lt;/code>:&lt;/p>
&lt;p>透过父文件进行指定，父文件在创建a和b两个对象的实例的时候，就可以指定他们的height；
至于如果要指定的还不是height这种属性，而是比较难访问的属性，怎么办呢？就得看看其他办法。&lt;/p>
&lt;p>&lt;code>solutionB&lt;/code>:
用信号槽的方式
这种方式是qt的原生自带的技术&lt;/p>
&lt;p>&lt;code>solutionC&lt;/code>:
用property
在 QML 中，你可以在子文件（例如 Background.qml 和 Buttons.qml）中定义 property，用来暴露组件的某些属性，如 height，以便在父组件中访问这些属性。&lt;/p>
&lt;h2 id="003-debug-qtguiimageio-libpng-warning-iccp-known-incorrect-srgb-profile">003. Debug: qt.gui.imageio: libpng warning: iCCP: known incorrect sRGB profile&lt;/h2>
&lt;p>&lt;a href="https://bbs.archlinux.org/viewtopic.php?pid=1269845#p1269845" target="_blank" rel="noopener">Post about the reason of this warning&lt;/a>&lt;/p>
&lt;pre tabindex="0">&lt;code>It&amp;#39;s because libpng 1.6 does more checking of the pngs, and one or more of the png files used has an old sRGB profile. 
It&amp;#39;s supposed to just be a warning, are you sure this is what&amp;#39;s causing the build failure? 

If so, you may need to replace the sRGB profile yourself or get upstream to do it.
&lt;/code>&lt;/pre>&lt;h2 id="004-取整怎么做">004. 取整怎么做？&lt;/h2>
&lt;p>在 QML 中，你可以使用 Math.floor()、Math.ceil() 或 Math.round() 函数来对带小数的数值进行取整操作：&lt;/p></description></item></channel></rss>