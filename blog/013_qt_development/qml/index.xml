<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>013_002_Grp_QML on 嵌入式系统 Enthusiast</title>
    <link>http://localhost:1313/blog/013_qt_development/qml/</link>
    <description>Recent content in 013_002_Grp_QML on 嵌入式系统 Enthusiast</description>
    <generator>Hugo</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sat, 10 Aug 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/blog/013_qt_development/qml/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>qml notes</title>
      <link>http://localhost:1313/blog/2024/08/10/qml-notes/</link>
      <pubDate>Sat, 10 Aug 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/blog/2024/08/10/qml-notes/</guid>
      <description>001. **[Expose Properties]property alias **property alias ${EXTERNAL_SHARED_ID}: ${INNER_ID} if we have this statement in sub-qml files, the qml file who invoke current sub-qml file could access these or this component whose id is ${EXTERNAL_SHARED_ID}&#xA;002. QML的模块化case：我要如何在子文件a.qml里面去访问子文件b.qml里面的某一个属性，例如height？&#xA;solutionA:&#xA;透过父文件进行指定，父文件在创建a和b两个对象的实例的时候，就可以指定他们的height； 至于如果要指定的还不是height这种属性，而是比较难访问的属性，怎么办呢？就得看看其他办法。&#xA;solutionB: 用信号槽的方式 这种方式是qt的原生自带的技术&#xA;solutionC: 用property 在 QML 中，你可以在子文件（例如 Background.qml 和 Buttons.qml）中定义 property，用来暴露组件的某些属性，如 height，以便在父组件中访问这些属性。&#xA;003. Debug: qt.gui.imageio: libpng warning: iCCP: known incorrect sRGB profilePost about the reason of this warning&#xA;It&amp;#39;s because libpng 1.</description>
    </item>
    <item>
      <title>QML Options</title>
      <link>http://localhost:1313/blog/2024/08/02/qml-options/</link>
      <pubDate>Fri, 02 Aug 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/blog/2024/08/02/qml-options/</guid>
      <description>理解你的需求，以下是 QML 中顶层容器的不同类型，以及它们适用于哪些场景：&#xA;顶层容器类型ApplicationWindow&#xD;用途：适用于创建应用程序的主窗口，带有内置的菜单栏和状态栏。&#xD;导入模块：QtQuick.Controls&#xD;Window&#xD;用途：用于创建没有内置菜单栏和状态栏的窗口。可以手动添加所需的控件。&#xD;导入模块：QtQuick.Window&#xD;Dialog&#xD;用途：用于创建对话框窗口，通常用于提示用户进行某些操作或输入信息。&#xD;导入模块：QtQuick.Controls&#xD;Popup&#xD;用途：用于创建弹出窗口，可以用于上下文菜单、工具提示等。&#xD;导入模块：QtQuick.Controls&#xD;Item&#xD;用途：最基本的可视化对象容器，不创建窗口，但可以作为其他元素的父容器。&#xD;导入模块：QtQuick&#xD;Rectangle&#xD;用途：用于创建简单的矩形区域，常用于布局和装饰。&#xD;导入模块：QtQuick&#xD;Application&#xD;用途：通常作为 QML 应用程序的根对象，管理整个应用程序的生命周期。&#xD;导入模块：QtQuick 示例代码&#xA;以下是每个顶层容器的简单示例：&#xA;1. ApplicationWindowimport QtQuick 6.2 import QtQuick.Controls 6.2 ApplicationWindow { visible: true width: 800 height: 600 title: &amp;#34;ApplicationWindow Example&amp;#34; } 2. Windowimport QtQuick 6.2 import QtQuick.Window 6.2 Window { visible: true width: 800 height: 600 title: &amp;#34;Window Example&amp;#34; } 3. Dialogimport QtQuick 6.2 import QtQuick.</description>
    </item>
    <item>
      <title>QML工程里的content文件夹</title>
      <link>http://localhost:1313/blog/2024/08/02/qml%E5%B7%A5%E7%A8%8B%E9%87%8C%E7%9A%84content%E6%96%87%E4%BB%B6%E5%A4%B9/</link>
      <pubDate>Fri, 02 Aug 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/blog/2024/08/02/qml%E5%B7%A5%E7%A8%8B%E9%87%8C%E7%9A%84content%E6%96%87%E4%BB%B6%E5%A4%B9/</guid>
      <description>Introductioncontent文件夹里面管理着qml的模块，这样的模块可以有多个。 我这里的content文件夹，名字本身可以是其他的名字。有没有什么字符限制，这个暂时还不知道。&#xA;入口在根目录下的main.qml&#xA;/* This file is generated and only relevant for integrating the project into a Qt 6 and cmake based C++ project. */&#xA;import QtQuick import content&#xA;App {&#xA;}&#xA;content 结构根目录下有一个CMakeList.txt&#xA;### This file is automatically generated by Qt Design Studio. ### Do not change qt_add_library(content STATIC) qt6_add_qml_module(content URI &amp;#34;content&amp;#34; VERSION 1.0 RESOURCE_PREFIX &amp;#34;/qt/qml&amp;#34; QML_FILES App.qml Screen01.ui.qml RESOURCES fonts/fonts.txt QML_FILES volume_mixer/a.qml QML_FILES volume_mixer/b.qml QML_FILES volume_mixer/c.qml QML_FILES volume_mixer/d.qml ) References1.</description>
    </item>
  </channel>
</rss>
