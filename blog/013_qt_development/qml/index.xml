<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>013_002_Grp_QML on 嵌入式系统 Enthusiast</title>
    <link>http://localhost:1313/blog/013_qt_development/qml/</link>
    <description>Recent content in 013_002_Grp_QML on 嵌入式系统 Enthusiast</description>
    <generator>Hugo</generator>
    <language>zh-cn</language>
    <lastBuildDate>Tue, 20 Aug 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/blog/013_qt_development/qml/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>QtQuick工程里的main函数解析</title>
      <link>http://localhost:1313/blog/2024/08/20/qtquick%E5%B7%A5%E7%A8%8B%E9%87%8C%E7%9A%84main%E5%87%BD%E6%95%B0%E8%A7%A3%E6%9E%90/</link>
      <pubDate>Tue, 20 Aug 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/blog/2024/08/20/qtquick%E5%B7%A5%E7%A8%8B%E9%87%8C%E7%9A%84main%E5%87%BD%E6%95%B0%E8%A7%A3%E6%9E%90/</guid>
      <description>当然！这是对 main 函数的详细解读，涵盖了各个部分的功能和目的。&#xA;代码逐行解释int main(int argc, char *argv[]) { QGuiApplication::setAttribute(Qt::AA_UseSoftwareOpenGL); QGuiApplication::setAttribute(Qt::AA_UseSoftwareOpenGL);：设置 Qt 应用程序的属性，强制使用软件渲染 OpenGL。这在没有硬件加速的环境中（例如某些虚拟机或嵌入式系统）非常有用，确保 OpenGL 渲染功能的兼容性。 set_qt_environment(); set_qt_environment()：这似乎是一个自定义函数，用于设置 Qt 环境的其他参数或配置。具体内容取决于你的实际实现。 QGuiApplication GUI_app(argc, argv); QGuiApplication：创建 Qt 的 GUI 应用程序对象，处理与用户界面相关的任务。argc 和 argv 用于传递命令行参数。 // 文件路径 QString iconPath = &amp;#34;://images/icons/app_icon.svg&amp;#34;; iconPath：指定应用程序图标的路径。路径使用 Qt 的资源系统（:// 表示 Qt 资源路径）。 // 检查文件是否存在 if (QFile::exists(iconPath)) { // 文件存在，设置图标 glb_GUI_app.setWindowIcon(QIcon(iconPath)); // qDebug() &amp;lt;&amp;lt; &amp;#34;Icon found and set.&amp;#34;; } else { // 文件不存在，处理错误 qDebug() &amp;lt;&amp;lt; &amp;#34;main(): Icon file not found:&amp;#34; &amp;lt;&amp;lt; iconPath &amp;lt;&amp;lt;&amp;#34;currentDir=&amp;#34;&amp;lt;&amp;lt; QDir::currentPath(); } QFile::exists(iconPath)：检查指定路径的图标文件是否存在。 glb_GUI_app.</description>
    </item>
    <item>
      <title>QML的Menu容器</title>
      <link>http://localhost:1313/blog/2024/08/19/qml%E7%9A%84menu%E5%AE%B9%E5%99%A8/</link>
      <pubDate>Mon, 19 Aug 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/blog/2024/08/19/qml%E7%9A%84menu%E5%AE%B9%E5%99%A8/</guid>
      <description>QML 中的 Menu 结构在 QML 中，Menu 是一个复杂的控件，它通常用于创建上下文菜单或主菜单。在 QML 中，像 Menu 这样的控件可以通过 background 和 contentItem 等属性来自定义其外观和行为。这些属性通常用于更改控件的默认布局和样式。&#xA;1. background 属性 background 属性是一个 Item 或任何其他可以作为背景的元素。它定义了 Menu 背景的样式。通常，你会使用 Rectangle 或其他图形元素来定义背景的颜色、边框、圆角等。 位置: background 位于 Menu 的最底层，用于显示菜单的背景。它通常覆盖整个 Menu 的区域。 2. contentItem 属性 contentItem 是一个 Item，定义了 Menu 的主要内容。通过自定义 contentItem，你可以完全控制 Menu 中菜单项的布局方式和样式。 位置: contentItem 位于 background 之上，包含 MenuItem 和其他控件的布局。 Menu 的基本结构可以将 Menu 看作一个容器，包含以下几个关键区域：&#xA;background:&#xA;功能: 负责绘制菜单的背景颜色、边框、阴影等样式。 自定义: 可以使用任何 Item 来自定义背景（通常是 Rectangle）。 默认行为: 如果不指定 background，菜单将使用系统默认的背景样式。 contentItem:&#xA;功能: 负责容纳并布局菜单项（MenuItem），可以是 Column、Row、Grid 等布局容器。 自定义: 可以使用 Column、Row、Grid 等来控制 MenuItem 的排列方式。 默认行为: 如果不指定 contentItem，Menu 将使用系统默认的布局来排列 MenuItem。 MenuItem:</description>
    </item>
    <item>
      <title>qml notes</title>
      <link>http://localhost:1313/blog/2024/08/10/qml-notes/</link>
      <pubDate>Sat, 10 Aug 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/blog/2024/08/10/qml-notes/</guid>
      <description>001. **[Expose Properties]property alias **property alias ${EXTERNAL_SHARED_ID}: ${INNER_ID} if we have this statement in sub-qml files, the qml file who invoke current sub-qml file could access these or this component whose id is ${EXTERNAL_SHARED_ID}&#xA;002. QML的模块化case：我要如何在子文件a.qml里面去访问子文件b.qml里面的某一个属性，例如height？&#xA;solutionA:&#xA;透过父文件进行指定，父文件在创建a和b两个对象的实例的时候，就可以指定他们的height； 至于如果要指定的还不是height这种属性，而是比较难访问的属性，怎么办呢？就得看看其他办法。&#xA;solutionB: 用信号槽的方式 这种方式是qt的原生自带的技术&#xA;solutionC: 用property 在 QML 中，你可以在子文件（例如 Background.qml 和 Buttons.qml）中定义 property，用来暴露组件的某些属性，如 height，以便在父组件中访问这些属性。&#xA;003. Debug: qt.gui.imageio: libpng warning: iCCP: known incorrect sRGB profilePost about the reason of this warning&#xA;It&amp;#39;s because libpng 1.</description>
    </item>
    <item>
      <title>QML Options</title>
      <link>http://localhost:1313/blog/2024/08/02/qml-options/</link>
      <pubDate>Fri, 02 Aug 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/blog/2024/08/02/qml-options/</guid>
      <description>理解你的需求，以下是 QML 中顶层容器的不同类型，以及它们适用于哪些场景：&#xA;顶层容器类型ApplicationWindow&#xD;用途：适用于创建应用程序的主窗口，带有内置的菜单栏和状态栏。&#xD;导入模块：QtQuick.Controls&#xD;Window&#xD;用途：用于创建没有内置菜单栏和状态栏的窗口。可以手动添加所需的控件。&#xD;导入模块：QtQuick.Window&#xD;Dialog&#xD;用途：用于创建对话框窗口，通常用于提示用户进行某些操作或输入信息。&#xD;导入模块：QtQuick.Controls&#xD;Popup&#xD;用途：用于创建弹出窗口，可以用于上下文菜单、工具提示等。&#xD;导入模块：QtQuick.Controls&#xD;Item&#xD;用途：最基本的可视化对象容器，不创建窗口，但可以作为其他元素的父容器。&#xD;导入模块：QtQuick&#xD;Rectangle&#xD;用途：用于创建简单的矩形区域，常用于布局和装饰。&#xD;导入模块：QtQuick&#xD;Application&#xD;用途：通常作为 QML 应用程序的根对象，管理整个应用程序的生命周期。&#xD;导入模块：QtQuick 示例代码&#xA;以下是每个顶层容器的简单示例：&#xA;1. ApplicationWindowimport QtQuick 6.2 import QtQuick.Controls 6.2 ApplicationWindow { visible: true width: 800 height: 600 title: &amp;#34;ApplicationWindow Example&amp;#34; } 2. Windowimport QtQuick 6.2 import QtQuick.Window 6.2 Window { visible: true width: 800 height: 600 title: &amp;#34;Window Example&amp;#34; } 3. Dialogimport QtQuick 6.2 import QtQuick.</description>
    </item>
    <item>
      <title>QML工程里的content文件夹</title>
      <link>http://localhost:1313/blog/2024/08/02/qml%E5%B7%A5%E7%A8%8B%E9%87%8C%E7%9A%84content%E6%96%87%E4%BB%B6%E5%A4%B9/</link>
      <pubDate>Fri, 02 Aug 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/blog/2024/08/02/qml%E5%B7%A5%E7%A8%8B%E9%87%8C%E7%9A%84content%E6%96%87%E4%BB%B6%E5%A4%B9/</guid>
      <description>Introductioncontent文件夹里面管理着qml的模块，这样的模块可以有多个。 我这里的content文件夹，名字本身可以是其他的名字。有没有什么字符限制，这个暂时还不知道。&#xA;入口在根目录下的main.qml&#xA;/* This file is generated and only relevant for integrating the project into a Qt 6 and cmake based C++ project. */&#xA;import QtQuick import content&#xA;App {&#xA;}&#xA;content 结构根目录下有一个CMakeList.txt&#xA;### This file is automatically generated by Qt Design Studio. ### Do not change qt_add_library(content STATIC) qt6_add_qml_module(content URI &amp;#34;content&amp;#34; VERSION 1.0 RESOURCE_PREFIX &amp;#34;/qt/qml&amp;#34; QML_FILES App.qml Screen01.ui.qml RESOURCES fonts/fonts.txt QML_FILES volume_mixer/a.qml QML_FILES volume_mixer/b.qml QML_FILES volume_mixer/c.qml QML_FILES volume_mixer/d.qml ) References1.</description>
    </item>
  </channel>
</rss>
